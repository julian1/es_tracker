

ruby calc_series.rb  > web/out.json

then point browser at,

file:///home/meteo/bitstamp_order_book/web/x.html

------

shouldn't be top bid, should be top ask - meaning price we can buy at.
	Also shouldn't be really thin.

	I wonder if people put a bunch of orders in to simulate depth
	then pull them all out? and trade on the other side?

----

The order book, gives far more representative information about a what's in the market
	compared with tech analysis of open,close,high,low etc. 

If there's more qty around.

It's hard to know how to do a correlation though

It would be very interesting to see a 3-d graph - of the order book and (top ask price).  

	- just hard-lines for the top bid/ask

	- we are going to need moving averages. - to do a regression.  no 
		the top should be difference. eg. are we increasing.

		- up relative to when ? 

-----

Simple event store. Doug Young 


psql -d test -c 'select id, t::time, msg from trades'

psql -d test -c 'select id, to_char( t, $$HH12:MI:SS$$ ) as time, msg, data->$$last$$ from queue where msg = $$ticker$$ '


- remember we build the complicated state graph (either memory or db) from the event stream

- putting the message bus like rabbit mq, in db enables replay. actually
	could couple with rabbit mq! if really wanted. 

- we can stop and start an ingest/input service with no issues. and make minor
	changes. and there's no db migrations, reingest etc.  

External operations on queue which normally shouldn't be done but can
	- can prune old errors out of the log if we want. without incident 
	- also change msg name. 

- note how basing things around the history - gives us language independence 
	the services are running and we can 
	including just using db tools to query the data.

- in real time, we only need to process triggers. 

- Now we want something that can play the events.  
	this can either ben

TODO
	need reader and writer db roles.

	Should hide the db entirely, and just have
	enqueue() method.

	see.
https://github.com/QueueClassic/queue_classic

